name: testing workflow

on:
  push:
    branches: [ master, pubsdproduction ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: build and conditionally deploy
    runs-on: ubuntu-latest
    env:
      MY_ENV_VAR: "hello"
    steps:
#      - name: Checkout Repo
#        uses: actions/checkout@v2
#      - name: try grep
#        run: |
#          composer install --no-dev --no-progress --no-suggest
#          composer show -P | grep wpackagist | sed 's/.* //g'
#      - name: try nvm
#        shell: bash -l -eo pipefail {0}
#        run: nvm current
      - name: Set ENV VARS
        run: |
          if [ "$GITHUB_REF" == "refs/heads/pubsdproduction" ]; then
              echo "::set-env name=DEPLOY_TO::production"
            elif [ "$GITHUB_REF" == "refs/heads/master" ]; then
              echo "::set-env name=DEPLOY_TO::staging"
          fi;
          ifconfig
          ifconfig vboxnet0 up
          docker pull postgres
          docker info

          export
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Get Yarn Cache Directory
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Get Composer Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-cache-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Get Composer Vendor Cache
        uses: actions/cache@v2
        with:
          path: |
            ${ composer show -P | grep wpackagist | sed 's/.* //g' }
            vendor
          key: ${{ runner.OS }}-composer-vendor-${{ hashFiles('**/composer.lock') }}
      - name: Get Yarn Node Modules Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.OS }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
      - name: Get Node Modules Cache
        uses: actions/cache@v2
        with:
          path: ${{ env.workspace }}/node_modules
          key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Composer install
        run: |
          composer install --no-dev --no-progress --no-suggest
      - name: Setup Node Version
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Yarn Install and Grunt Build Tasks
        shell: bash
        run: |
          echo node version $(node -v)
          yarn install --frozen-lockfile
#          grunt --debug

      - name: build docker images
        if: success() && env.DEPLOY_TO
        run: |
          echo "depoy to detected. running build images..."
      - name: deploy to staging
        if: success() && env.DEPLOY_TO == 'staging'
        run: |
         echo "publishing to staging"
      - name: deploy to production
        if: success() && env.DEPLOY_TO == 'production'
        run: |
          echo "publishing to production"


